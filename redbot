#!/usr/bin/env python3

from dataclasses import dataclass
import asyncio
import enum
import nio
import os
import pickle
import requests
import signal
import sys


RedTopTenTag = enum.IntEnum(
    "RedTopTenTag", "DAY WEEK OVERALL SNATCHED DATA SEEDED", start=0
)


@dataclass
class RedRelease:
    torrent_id: int
    group_id: int
    artist_name: str
    group_name: str
    image: str


class MatrixClient(nio.AsyncClient):
    async def cb_autojoin(self, room, event):
        print("invite to room", room)
        self.join(room.id)

    async def cb_message(self, room, event):
        print(f"message in {room.display_name}: {event.sender}: {event.body}")

    async def upload_image_url(self, url):
        print("getting image", url)
        resp_img = requests.get(url)
        content_length = int(
            resp_img.headers.get("content-length", len(resp_img.content))
        )
        content_type = resp_img.headers.get("content-type")
        resp_matrix = await self.upload(
            lambda *_: resp_img.content, content_type, filesize=content_length
        )
        resp_upload = resp_matrix[0]
        return resp_upload.content_uri

    async def send_all(self, content):
        for room_id in (await self.joined_rooms()).rooms:
            await self.room_send(
                room_id=room_id, message_type="m.room.message", content=content
            )


def seen_ids_set(path, ids):
    with open(path, "wb") as handle:
        pickle.dump(ids, handle, protocol=pickle.HIGHEST_PROTOCOL)


def seen_ids_get(path):
    try:
        with open(path, "rb") as handle:
            return pickle.load(handle)
    except FileNotFoundError:
        return set()


def get_top_ten(base_url, api_key):
    raw = requests.post(
        base_url,
        headers={"Authorization": api_key},
        params={"action": "top10"},
    )
    if "json" not in raw.headers.get("content-type", ""):
        return []
    resp = raw.json()["response"]
    items = resp[RedTopTenTag.DAY]["results"]
    return [
        RedRelease(
            item["torrentId"],
            item["groupId"],
            item["artist"],
            item["groupName"],
            item["wikiImage"],
        )
        for item in items
    ]


def message_from_release(release, image_uri):
    image_format = f"""<img src="{image_uri}">""" if image_uri else ""
    return f"""{image_format}<h1>{release.artist_name}</h1><h3><i>{release.group_name}</i></h3>"""


async def top_ten_iter(client, config):
    seen_ids = seen_ids_get(config["db_path"])
    try:
        releases = get_top_ten(config["red_base_url"], config["red_api_key"])
    except requests.exceptions.ConnectionError:
        return
    for release in releases:
        if release.group_id in seen_ids:
            print("skipping", release.group_id)
            continue
        print("sending", release.group_id)
        seen_ids.add(release.group_id)
        message = message_from_release(
            release,
            (await client.upload_image_url(release.image)) if release.image else None,
        )
        await client.send_all(
            {
                "msgtype": "m.text",
                "format": "org.matrix.custom.html",
                "formatted_body": message,
                "body": message,
            }
        )
    seen_ids_set(config["db_path"], seen_ids)


async def start(config):
    client = MatrixClient(config["matrix_homeserver"], config["matrix_username"])
    client.add_event_callback(client.cb_autojoin, nio.InviteEvent)
    client.add_event_callback(client.cb_message, nio.RoomMessageText)
    await client.login(config["matrix_password"])
    while True:
        await top_ten_iter(client, config)
        await asyncio.sleep(config["update_interval_secs"])


def must_env(key):
    try:
        return os.environ[key]
    except KeyError:
        print(f"please provide {key}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    config = {
        "red_api_key": must_env("REDBOT_RED_API_KEY"),
        "red_base_url": "https://redacted.ch/ajax.php",
        "matrix_homeserver": must_env("REDBOT_MATRIX_HOMESERVER"),
        "matrix_username": must_env("REDBOT_MATRIX_USERNAME"),
        "matrix_password": must_env("REDBOT_MATRIX_PASSWORD"),
        "update_interval_secs": int(must_env("REDBOT_UPDATE_INTERVAL_SECS")),
        "db_path": must_env("REDBOT_DB_PATH"),
    }
    event_loop = asyncio.get_event_loop()
    event_loop.add_signal_handler(signal.SIGHUP, exit)
    event_loop.add_signal_handler(signal.SIGTERM, exit)
    event_loop.run_until_complete(start(config))
